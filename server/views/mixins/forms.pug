- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes).form-signin
    block


mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
      placeholder
    )&attributes(attributes).mb-3
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(
      for= inputId
    )= propertyName

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin textArea(data = null)
  .mb-3
  label(for='data_description') Описание
  textarea#data_description.form-control(name='data[description]' rows='3')= data

mixin divStatus(data, name, propertyName, SelectedId = null, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  .mb-3
  label(for='data_statusId')=name
  select(
    id= '#data_statusId'
    name='data[statusId]'
    class=classLine
    )
    each el, i in data ? data : []
      if i === 0
        option(value="") 
      option(value=el.id selected= SelectedId == el.id)= el[propertyName]

mixin divExecutor(data, name, propertyName, SelectedId = null)
  .mb-3
  label(for='data_executorId')=name
  select#data_statusId.form-control(name='data[executorId]')
    each el, i in data ? data : []
      if i === 0
        option(value="")     
      option(value=el.id selected= SelectedId == el.id)= el[propertyName]

mixin divLabel(data, name, propertyName, SelectedIds = [])
  .mb-3
  label(for='data_labels')=name
  select#data_labels.form-control(name='data[labels]' multiple='multiple')
    each el, i in data ? data : []  
      option(value=el.id selected= (SelectedIds.find(({ id }) => id == el.id) ? true : false))= el[propertyName]